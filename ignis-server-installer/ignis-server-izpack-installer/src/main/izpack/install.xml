<?xml version="1.0" encoding="UTF-8"?>
<izpack:installation version="5.0"
                     xmlns:izpack="http://izpack.org/schema/installation"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://izpack.org/schema/installation http://izpack.org/schema/5.1/izpack-installation-5.1.xsd">

  <info>
    <appname>FCR Engine - Ignis Server</appname>
    <appversion>@{izpack.app.version}</appversion>
    <javaversion>1.8</javaversion>
    <uninstaller write="no" />
    <writeinstallationinformation>no</writeinstallationinformation>
    <summarylogfilepath>${INSTALL_PATH}/logs</summarylogfilepath>
    <url>https://www.vermeg.com/</url>
  </info>

  <jar src="@{izpack.ignis.installer.jar}" stage="install" />

  <guiprefs height="600" width="800" resizable="yes" />

  <locale>
    <langpack iso3="eng" />
  </locale>

  <resources>
    <res id="userInputLang.xml" src="lang/userInputLang.xml" />
    <res id="userInputSpec.xml" src="panel/userInputSpec.xml" type="xml" />
  </resources>

  <conditions>
    <condition id="isH2" type="variable">
      <name>database.type</name>
      <value>h2</value>
    </condition>
    <condition id="isOracle" type="variable">
      <name>database.type</name>
      <value>oracle</value>
    </condition>
    <condition id="oracleSid" type="variable">
      <name>database.oracle.connection.type</name>
      <value>sid</value>
    </condition>
    <condition id="oracleServiceName" type="variable">
      <name>database.oracle.connection.type</name>
      <value>serviceName</value>
    </condition>
    <condition id="oracleTns" type="variable">
      <name>database.oracle.connection.type</name>
      <value>tns</value>
    </condition>
    <condition id="isMSSqlServer" type="variable">
      <name>database.type</name>
      <value>mssqlserver</value>
    </condition>
    <condition id="isMySql" type="variable">
      <name>database.type</name>
      <value>mysql</value>
    </condition>

    <condition type="or" id="isMySqlorMsSqlServer">
      <condition type="ref" refid="isMySql" />
      <condition type="ref" refid="isMSSqlServer" />
    </condition>

    <condition id="notSetAdminPassword" type="variable">
      <name>admin.exists</name>
      <value>false</value>
    </condition>

    <condition type="empty" id="noDatabaseInstance">
      <variable>database.instance</variable>
    </condition>

    <condition id="isS3" type="variable">
      <name>dataset.source.location.type</name>
      <value>S3</value>
    </condition>
  </conditions>

  <variables>
    <!--Server settings-->
    <variable name="java.mem.max"
              value="512m" />
    <variable name="ignis.host"
              value="${HOST_NAME}" />
    <variable name="ignis.environment"
              value="" />
    <variable name="server.https.port"
              value="443" />
    <variable name="server.http.port"
              value="80" />
    <variable name="server.servlet.contextPath"
              value="fcrengine" />
    <variable name="management.health.hadoop.enabled"
              value="true" />

    <!--Database settings-->
    <variable name="H2_MODE_FLAG"
              value="" />
    <variable name="database.type"
              value="mysql" />
    <variable name="database.jdbc.url"
              value="jdbc:mysql://localhost:3306/ignis" />
    <variable name="database.owner.user"
              value="" />
    <variable name="database.owner.password"
              value="" />
    <variable name="database.jdbc.driver"
              value="com.mysql.jdbc.Driver" />
    <variable name="spring.datasource.validation.query"
              value="SELECT 1" />
    <variable name="database.hibernate.dialect"
              value="org.hibernate.dialect.MySQLDialect" />
    <variable name="database.hibernate.new.id.generator"
              value="false" />
    <variable name="database.app.user"
              value="" />
    <variable name="database.app.password"
              value="" />
    <variable name="database.role.name"
              value="" />
    <variable name="database.host"
              value="" />
    <variable name="database.port"
              value="" />
    <variable name="database.instance"
              value="" />
    <variable name="database.name"
              value="" />
    <variable name="database.oracle.tns"
              value="" />
    <variable name="database.oracle.connection.type"
              value="sid" />
    <variable name="datasource.schema.empty"
              value="" />
    <variable name="ignis.admin.user"
              value="admin" />
    <variable name="ignis.admin.password"
              value="" />
    <variable name="ignis.admin.password.encrypted"
              value="" />

    <!--Dataset source settings-->
    <variable name="dataset.source.location.type"
              value="LOCAL" />
    <variable name="dataset.source.location.s3.credentialsSource"
              value="INSTANCE" />
    <variable name="dataset.source.location.s3.region"
              value="" />
    <variable name="dataset.source.location.s3.bucket"
              value="" />
    <variable name="dataset.source.location.s3.prefix"
              value="" />
    <variable name="dataset.error.location.s3.bucket"
              value="" />
    <variable name="dataset.error.location.s3.prefix"
              value="" />

    <!--File system protocol to use when reading/writing to S3-->
    <variable name="s3.protocol"
              value="s3a" />

    <!--Togglz settings-->
    <variable name="togglz.console.enabled"
              value="false" />

    <!--Hadoop settings-->
    <variable name="platform.tools.master.host"
              value="${HOST_NAME}" />
    <variable name="zookeeper.hosts"
              value="${platform.tools.master.host}" />
    <variable name="hdfs.nn.host"
              value="${platform.tools.master.host}" />
    <variable name="zookeeper.client.port"
              value="2181" />
    <variable name="hadoop.user"
              value="${USER_NAME}" />
    <variable name="fs.defaultFS"
              value="hdfs://${hdfs.nn.host}:9000" />
    <variable name="yarn.rm.host"
              value="${platform.tools.master.host}" />
    <variable name="yarn.resourcemanager.hostname"
              value="${yarn.rm.host}" />
    <variable name="yarn.resourcemanager.port"
              value="8088" />
    <variable name="yarn.nodemanager.pmem-check-enabled"
              value="false" />
    <variable name="yarn.nodemanager.vmem-check-enabled"
              value="false" />

    <!--Phoenix settings-->
    <variable name="phoenix.query.server.host"
              value="${platform.tools.master.host}" />
    <variable name="phoenix.query.server.port"
              value="8765" />
    <variable name="phoenix.salt.bucket.count"
              value="1" />

    <!--Spark settings-->
    <variable name="spark.history.server.port"
              value="18080" />
    <variable name="spark.history.server.host"
              value="${platform.tools.master.host}" />
    <variable name="spark.executor.memory"
              value="2G" />
    <variable name="spark.executor.cores"
              value="3" />
    <variable name="spark.executor.instances"
              value="12" />
    <variable name="spark.driver.memory"
              value="2G" />
    <variable name="spark.default.parallelism"
              value="36" />
    <variable name="spark-defaults.conf.debug.mode"
              value="false" />

    <!--Datadog settings-->
    <variable name="management.metrics.export.datadog.api-key"
              value="" />
    <variable name="management.metrics.export.datadog.enabled"
              value="false" />
    <variable name="management.metrics.export.datadog.host-tag"
              value="$HOST_NAME" />
    <variable name="management.metrics.export.datadog.step"
              value="1m" />
  </variables>

  <dynamicvariables>
    <variable name="izpack.dist.flyway.dir"
              value="@{izpack.dist.flyway.dir}" />
    <variable name="izpack.dist.ignis.dir"
              value="@{izpack.dist.ignis.dir}" />

    <variable name="INSTALLER_PATH"
              value="${SYSTEM[INSTALLER_PATH]}" />
    <variable name="FCR_ENGINE_HOME"
              value="${INSTALL_PATH}/../.." />
    <variable name="DATA_PATH"
              value="${FCR_ENGINE_HOME}/data" />
    <variable name="tmp.path"
              value="${INSTALL_PATH}/tmp" />

    <variable name="FLYWAY_HOME"
              value="${INSTALL_PATH}/@{izpack.dist.flyway.dir}" />
    <variable name="IGNIS_HOME"
              value="${INSTALL_PATH}/@{izpack.dist.ignis.dir}" />
    <variable name="IGNIS_PROPS_PATH"
              value="${IGNIS_HOME}/conf/application.properties" />
    <variable name="IGNIS_LOG_PATH"
              value="${IGNIS_HOME}/logs/ignis.log" />
    <variable name="IGNIS_SERVER_JAR"
              value="${IGNIS_HOME}/lib/@{izpack.ignis.server.jar}" />

    <!--Flyway settings-->
    <variable name="flyway.locations.path"
              condition="!isH2"
              value="${FLYWAY_HOME}/sql/${database.type}" />
    <variable name="flyway.locations.path"
              condition="isH2"
              value="${FLYWAY_HOME}/sql/oracle" />
    <variable name="ignis.db.migration.classpath"
              condition="!isH2"
              value="com/lombardrisk/ignis/db/migration/${database.type}" />
    <variable name="ignis.db.migration.classpath"
              condition="isH2"
              value="com/lombardrisk/ignis/db/migration/oracle" />
    <variable name="database.owner.user"
              condition="isH2"
              value="ignis-testdb" />

    <!--Server settings-->
    <variable name="ignis.ui.home"
              value="${IGNIS_HOME}/ui" />
    <variable name="logging.file"
              value="${IGNIS_LOG_PATH}" />
    <variable name="logging.config"
              value="file:${IGNIS_HOME}/conf/logback.xml" />

    <variable name="server.ssl.key-store"
              value="${IGNIS_HOME}/conf/lrm.keystore" />
    <variable name="server.ssl.key-password"
              value="lombard119" />
    <variable name="server.ssl.key-store-password"
              value="${server.ssl.key-password}" />
    <variable name="server.ssl.enabled-protocols"
              value="TLSv1.2" />
    <variable name="server.ssl.protocol"
              value="TLS" />
    <variable name="server.ssl.ciphers"
              value="ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA" />
    <variable name="server.tomcat.basedir"
              value="${IGNIS_HOME}/logs/access" />

    <!--Database settings-->
    <variable name="H2_MODE_FLAG"
              condition="isH2"
              value="--" />

    <variable name="database.jdbc.url"
              condition="isOracle+oracleSid"
              value="jdbc:oracle:thin:@${database.host}:${database.port}:${database.instance}" />
    <variable name="database.jdbc.url"
              condition="isOracle+oracleServiceName"
              value="jdbc:oracle:thin:@//${database.host}:${database.port}/${database.instance}" />
    <variable name="database.jdbc.url"
              condition="isOracle+oracleTns"
              value="jdbc:oracle:thin:@${database.oracle.tns}" />
    <variable name="database.jdbc.url"
              condition="isMSSqlServer+noDatabaseInstance"
              value="jdbc:sqlserver://${database.host}:${database.port};databaseName=${database.name}" />
    <variable name="database.jdbc.url"
              condition="isMSSqlServer+!noDatabaseInstance"
              value="jdbc:sqlserver://${database.host}:${database.port};databaseName=${database.name};instanceName=${database.instance}" />
    <variable name="database.jdbc.url"
              condition="isMySql"
              value="jdbc:mysql://${database.host}:${database.port}/${database.name}" />
    <variable name="database.jdbc.url"
              condition="isH2"
              value="jdbc:h2:${DATA_PATH}/ignis-server;MODE=Oracle;USER=${database.owner.user};AUTO_SERVER=TRUE" />

    <variable name="database.hibernate.dialect"
              condition="isOracle"
              value="org.hibernate.dialect.Oracle12cDialect" />
    <variable name="database.hibernate.dialect"
              condition="isMSSqlServer"
              value="org.hibernate.dialect.SQLServer2012Dialect" />
    <variable name="database.hibernate.dialect"
              condition="isMySql"
              value="org.hibernate.dialect.MySQL5Dialect" />
    <variable name="database.hibernate.dialect"
              condition="isH2"
              value="org.hibernate.dialect.Oracle12cDialect" />

    <variable name="database.hibernate.new.id.generator"
              condition="isOracle"
              value="true" />
    <variable name="database.hibernate.new.id.generator"
              condition="isMSSqlServer"
              value="true" />
    <variable name="database.hibernate.new.id.generator"
              condition="isMySql"
              value="false" />

    <variable name="database.jdbc.driver"
              condition="isOracle"
              value="oracle.jdbc.OracleDriver" />
    <variable name="database.jdbc.driver"
              condition="isMSSqlServer"
              value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
    <variable name="database.jdbc.driver"
              condition="isMySql"
              value="com.mysql.jdbc.Driver" />
    <variable name="database.jdbc.driver"
              condition="isH2"
              value="org.h2.Driver" />

    <variable name="spring.datasource.validation.query"
              condition="isOracle"
              value="SELECT 1 FROM DUAL" />
    <variable name="spring.datasource.validation.query"
              condition="isMSSqlServer"
              value="SELECT 1" />
    <variable name="spring.datasource.validation.query"
              condition="isMySql"
              value="SELECT 1" />

    <variable name="spring.datasource.db.schema"
              condition="isOracle"
              value="${database.owner.user}" />
    <variable name="spring.datasource.db.schema"
              condition="!isOracle"
              value="${datasource.schema.empty}" />

    <variable name="database.connection.user"
              condition="isOracle"
              value="${database.app.user}" />
    <variable name="database.connection.password"
              condition="isOracle"
              value="${database.app.password}" />

    <variable name="database.connection.user"
              condition="!isOracle"
              value="${database.owner.user}" />
    <variable name="database.connection.password"
              condition="!isOracle"
              value="${database.owner.password}" />

    <variable name="database.type"
              condition="isMSSqlServer"
              value="mssqlserver" />
    <variable name="database.type"
              condition="isOracle"
              value="oracle" />
    <variable name="database.type"
              condition="isMySql"
              value="mysql" />
    <variable name="spring.jpa.hibernate.ddl-auto"
              condition="!isH2"
              value="validate" />
    <variable name="spring.jpa.hibernate.ddl-auto"
              condition="isH2"
              value="none" />

    <!--Togglz settings-->
    <variable name="togglz.features-file"
              value="${IGNIS_HOME}/conf/feature.file.properties" />

    <!--Phoenix settings-->
    <variable name="phoenix.datasource.url"
              value="jdbc:phoenix:thin:url=http://${phoenix.query.server.host}:${phoenix.query.server.port};serialization=PROTOBUF" />
    <variable name="phoenix.datasource.driver-class-name"
              value="org.apache.phoenix.queryserver.client.Driver" />

    <variable name="dataset.source.location.localPath"
              value="${DATA_PATH}/datasets" />
    <variable name="dataset.source.location.remotePath"
              value="${fs.defaultFS}/user/${hadoop.user}/datasets" />

    <!--Spark settings-->
    <variable name="spark.libs.path"
              value="${IGNIS_HOME}/lib/__spark_libs__.zip" />
    <variable name="spark.libs.copy"
              value="true" />
    <variable name="spark.drivers.staging.resource"
              value="${IGNIS_HOME}/lib/@{izpack.spark.staging.jar}" />
    <variable name="spark.drivers.validation.resource"
              value="${IGNIS_HOME}/lib/@{izpack.spark.validation.jar}" />
    <variable name="spark.drivers.pipeline.resource"
              value="${IGNIS_HOME}/lib/@{izpack.spark.pipeline.jar}" />
    <variable name="spark.extra.jars.dir"
              value="${IGNIS_HOME}/lib/" />

    <variable name="spark.eventLog.dir"
              value="${fs.defaultFS}/spark/app-logs" />
    <variable name="spark.eventLog.compress"
              value="true" />
    <variable name="spark.eventLog.enabled"
              value="true" />
    <variable name="spark.yarn.maxAppAttempts"
              value="1" />
    <variable name="spark.yarn.historyServer.address"
              value="${spark.history.server.host}:${spark.history.server.port}" />
    <variable name="spark.yarn.archive"
              value="${fs.defaultFS}/spark/lib/__spark_libs__.zip" />
    <variable name="spark.log4j.file"
              value="${IGNIS_HOME}/conf/spark/log4j.properties" />
    <variable name="spark.yarn.app.tracking.resource.url"
              value="http://${yarn.resourcemanager.hostname}:${yarn.resourcemanager.port}/cluster/app" />
    <variable name="spark.driver.extraClassPath"
              value="" />
    <variable name="spark.driver.extraLibraryPath"
              value="" />
    <variable name="spark.executor.extraClassPath"
              value="" />
    <variable name="spark.executor.extraLibraryPath"
              value="" />
  </dynamicvariables>

  <panels>
    <!--Shows App Info-->
    <panel classname="HelloPanel" />

    <!--Sets $INSTALL_PATH-->
    <panel classname="TargetPanel">
      <validator classname="com.izforge.izpack.installer.validator.ConditionValidator" />
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.InstallerStructureValidator" />
    </panel>

    <!--Sets ignis-server settings-->
    <panel classname="UserInputPanel" id="panel.server">
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.ServerValidator" />
    </panel>

    <!--Sets and checks database settings-->
    <panel classname="UserInputPanel" id="panel.database.type" />
    <panel classname="UserInputPanel" id="panel.database.connection">
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.DatabaseValidator" />
      <actions>
        <action stage="postvalidate"
                classname="com.lombardrisk.ignis.izpack.panel.action.CheckAdminUserExistsAction" />
      </actions>
    </panel>

    <!--Sets or creates admin user password setting-->
    <panel classname="UserInputPanel" id="panel.admin.password" condition="notSetAdminPassword">
      <actions>
        <action stage="postvalidate"
                classname="com.lombardrisk.ignis.izpack.panel.action.EncryptAdminPasswordAction" />
      </actions>
    </panel>

    <!--Sets data source settings-->
    <panel classname="UserInputPanel" id="panel.dataset.source.location" />
    <panel classname="UserInputPanel" id="panel.dataset.source.location.local" condition="!isS3">
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.LocalDatasourceValidator" />
    </panel>
    <panel classname="UserInputPanel" id="panel.dataset.source.location.s3" condition="isS3">
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.S3DatasourceValidator" />
    </panel>

    <!--Sets Hadoop settings-->
    <panel classname="UserInputPanel" id="panel.hadoop">
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.HadoopValidator" />
    </panel>

    <!--Sets Phoenix settings-->
    <panel classname="UserInputPanel" id="panel.phoenix">
      <validator classname="com.lombardrisk.ignis.izpack.panel.validation.PhoenixValidator" />
    </panel>

    <!--Sets Spark settings-->
    <panel classname="UserInputPanel" id="panel.spark" />

    <!--Copies Distributions And Runs Installation Packs-->
    <panel classname="InstallPanel">
      <actions>
        <action stage="preactivate" classname="com.lombardrisk.ignis.izpack.panel.action.CopyDistributionDirsAction" />
      </actions>
    </panel>

    <panel classname="SimpleFinishPanel" />
  </panels>

  <packs>
    <pack name="Current Configuration Setup" required="true">
      <description>Setup Current Configuration</description>

      <fileset dir="/"
               targetdir="${INSTALL_PATH}"
               override="true">
        <include name="system.properties" />
      </fileset>

      <parsable type="plain">
        <fileset targetdir="${INSTALL_PATH}">
          <include name="system.properties" />
        </fileset>
      </parsable>
    </pack>

    <pack name="Shared Config Setup" required="true">
      <description>Setup Shared Config</description>

      <fileset dir="bin"
               targetdir="${INSTALL_PATH}/bin"
               override="true" />

      <parsable type="plain">
        <fileset targetdir="${INSTALL_PATH}/bin">
          <include name="**/*.service" />
        </fileset>
      </parsable>

      <parsable type="shell">
        <fileset targetdir="${INSTALL_PATH}/bin">
          <include name="**/*.sh" />
        </fileset>
      </parsable>
    </pack>

    <pack name="@{izpack.dist.ignis.dir} Setup" required="true">
      <description>Setup @{izpack.dist.ignis.dir}</description>

      <fileset dir="@{izpack.dist.ignis.dir}/conf"
               targetdir="${IGNIS_HOME}/conf"
               includes="application.properties"
               override="true" />

      <parsable type="javaprop">
        <fileset targetdir="${IGNIS_HOME}/conf"
                 includes="application.properties" />
      </parsable>
    </pack>

    <pack name="@{izpack.dist.flyway.dir} Setup" required="true">
      <description>Setup @{izpack.dist.flyway.dir}</description>

      <fileset dir="@{izpack.dist.flyway.dir}/conf"
               targetdir="${FLYWAY_HOME}/conf"
               includes="flyway.conf"
               override="true" />

      <parsable type="plain">
        <fileset targetdir="${FLYWAY_HOME}/conf"
                 includes="flyway.conf" />
      </parsable>
    </pack>

    <pack name="Run Post-Install Setup" required="true">
      <description>Run post-install setup</description>

      <file src="post-install.sh"
            targetdir="${INSTALL_PATH}"
            override="true" />

      <parsable type="shell">
        <fileset targetdir="${INSTALL_PATH}"
                 includes="post-install.sh" />
      </parsable>

      <executable type="bin" stage="postinstall" keep="false"
                  targetfile="${INSTALL_PATH}/post-install.sh"
                  failure="abort">
        <os family="unix" />
      </executable>
    </pack>
  </packs>
</izpack:installation>
