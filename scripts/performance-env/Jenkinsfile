import com.lombardrisk.pipeline.aws.s3.S3Download
import com.lombardrisk.pipeline.aws.s3.S3Find

import java.time.Instant
import java.time.ZoneId
import java.time.ZonedDateTime

@Library('pipeline-libs') _

stage('setup') {
    node {
        loadLocalSteps()

        common.setupEnvVars()
    }
}

private void loadLocalSteps() {
    library identifier: 'ignis@master',
            retriever: modernSCM([
                    $class       : 'GitSCMSource',
                    remote       : "ssh://git@bitbucket.lombardrisk.com:7999/cs/ignis.git",
                    credentialsId: '4775e132-d845-4896-971d-f2a210ccdb02',
                    id           : 'e533458a-0409-4028-8de1-6adb3d17dd1f',
                    traits       : [
                            [$class: 'BranchDiscoveryTrait'],
                            [$class: 'CloneOptionTrait', extension: [depth: 0, noTags: true, shallow: true]]
                    ]
            ])
}

String platformToolsCandidateRelease
String ignisServerCandidateRelease

HOME_DIR = '/home/ec2-user'

MVN = maven.initialiseMvn 'mvn-3'
BUILD_INFO = maven.newBuildInfo()
IGNIS_POM = 'pom.xml'

PERFORMANCE_REPORTS_DIR = 'ignis-functional-test/target/performance-reports'

pipeline {
    agent { label 'headless' }
    options { skipDefaultCheckout true }
    triggers {
        cron('H 19 * * 1-4')
    }

    environment { JAVA_HOME = tool 'OracleJDK8' }

    parameters {
        string name: 'PLATFORM_TOOLS_VERSION',
                description: 'Version of platform-tools to deploy to performance environment',
                defaultValue: ''
        booleanParam name: 'PLATFORM_TOOLS_SKIP_REINSTALL',
                description: 'Skip reinstalling platform-tools if "~/fcr-engine/$PLATFORM_TOOLS_VERSION" already exists',
                defaultValue: true

        string name: 'IGNIS_SERVER_VERSION',
                description: 'Version of ignis-server to deploy to performance environment',
                defaultValue: ''
        booleanParam name: 'IGNIS_SERVER_SKIP_REINSTALL',
                description: 'Skip reinstalling ignis-server if "~/fcr-engine/platform-tools/$IGNIS_SERVER_VERSION" already exists',
                defaultValue: true
    }

    stages {
        stage('Choose release versions') {
            steps {
                script {
                    platformToolsCandidateRelease = releaseFinder.platformTools(params.PLATFORM_TOOLS_VERSION)
                    ignisServerCandidateRelease = releaseFinder.ignisServer(params.IGNIS_SERVER_VERSION)

                    showConfirmation(
                            params.ENV_LABEL,
                            designStudioCandidateRelease,
                            platformToolsCandidateRelease,
                            ignisServerCandidateRelease,
                            params.INSTALL_AR,
                            agileReporterCandidateRelease)
                }
            }
        }

        stage('Install FCR Engine') {
            agent { label 'fcr-performance' }
            environment { JAVA_HOME = tool 'OracleJDK8' }

            steps {
                script {
                    setupInstallConfig()

                    installPlatformTools(platformToolsCandidateRelease, params.PLATFORM_TOOLS_SKIP_REINSTALL)
                    installIgnisServer(ignisServerCandidateRelease, params.IGNIS_SERVER_SKIP_REINSTALL)

                    downloadTestDatasets()
                }
            }
            post {
                always {
                    removeCandidateReleases()
                }
            }
        }

        stage('Run performance tests') {
            steps {
                shallowCheckout()

                generateVersion(platformToolsCandidateRelease, ignisServerCandidateRelease)

                performanceTest()
            }

            post {
                always {
                    archiveArtifacts "${PERFORMANCE_REPORTS_DIR}/*.csv"
                    junit keepLongStdio: true, testResults: 'ignis-functional-test/target/failsafe-reports/*.xml'

                    plotGraph([
                            csvFile    : 'stageInIncrements-plot.csv',
                            title      : 'Stage in increments',
                            yaxis      : 'Duration (s)',
                            logarithmic: true
                    ])
                    plotGraph([
                            csvFile: 'soakTest_250k-average.csv',
                            title  : '250k soak test',
                            yaxis  : 'Duration (s)'
                    ])
                    plotGraph([
                            csvFile: 'soakTest_5m-average.csv',
                            title  : '5m soak test',
                            yaxis  : 'Duration (s)'
                    ])
                    storeResults ignisServerCandidateRelease
                }
            }
        }
    }

    post {
        always {
            cleanUpIgnisArtifacts()
        }
    }
}

private void installDesignStudio(String designStudioCandidateRelease) {
    releaseDesignStudio homeDir: HOME_DIR, candidateReleasePath: designStudioCandidateRelease
}

private void installPlatformTools(String platformToolsCandidateRelease, boolean skipReinstall) {
    releasePlatformTools candidateReleasePath: platformToolsCandidateRelease, skipReinstall: skipReinstall
}

private void installIgnisServer(String ignisServerCandidateRelease, boolean skipReinstall) {
    releaseIgnisServer candidateReleasePath: ignisServerCandidateRelease, skipReinstall: skipReinstall
}

private ZonedDateTime toTimestamp(long unixTimestamp) {
    return ZonedDateTime.ofInstant(Instant.ofEpochMilli(unixTimestamp), ZoneId.systemDefault())
}

private void setupInstallConfig() {
    shallowCheckout()

    sh 'cp scripts/performance-env/* .'
}


private void downloadTestDatasets() {
    def datasetsDir = "${HOME_DIR}/fcr-engine/data/datasets/"
    def datasets = sh(script: "cd ${datasetsDir} && ls *.csv || true", returnStdout: true).split('\\s+')

    def files = new S3Find(
            steps: this, bucketName: aws.S3.Deploy.bucketName, s3Path: 'FCR-Engine/Performance/'
    ).findFiles('*.csv')
    files.findAll { !datasets.contains("${it}") }
            .each {
        new S3Download(
                steps: this, bucketName: aws.S3.Deploy.bucketName, releasePath: 'FCR-Engine/Performance'
        ).download("${it}", "${datasetsDir}/${it}")
    }
}

private void removeCandidateReleases() {
    sh '''find -name "*.zip" | xargs rm -f
          rm -rf ./fcr-engine-*'''
}

private void generateVersion(String platformToolsCandidateRelease, String ignisServerCandidateRelease) {
    def fcrVersion = toFcrVersion(platformToolsCandidateRelease, ignisServerCandidateRelease)

    MVN.run goals: "-q versions:set versions:commit -DnewVersion=${fcrVersion}".toString(),
            pom: IGNIS_POM,
            buildInfo: BUILD_INFO

    currentBuild.displayName = "#${env.BUILD_NUMBER}-${fcrVersion}"
}

@NonCPS
private String toFcrVersion(String platformToolsCandidateRelease, String ignisServerCandidateRelease) {
    def matchPlatformTools = (platformToolsCandidateRelease =~ /fcr-engine-platform-tools-(.*).zip/)
    def matchIgnisServer = (ignisServerCandidateRelease =~ /fcr-engine-ignis-server-(.*).zip/)

    return "pt${matchPlatformTools[0][1]}-ig${matchIgnisServer[0][1]}"
}

private void performanceTest() {
    MVN.run goals: '-q -T1C clean install -P skipTests -pl ignis-functional-test -am',
            pom: IGNIS_POM,
            buildInfo: BUILD_INFO
    MVN.run goals: 'verify -P performance -pl ignis-functional-test',
            pom: IGNIS_POM,
            buildInfo: BUILD_INFO
}

private void plotGraph(Map args) {
    plot([
            csvFileName: "plot-${args.csvFile}",
            csvSeries  : [[
                                  displayTableFlag: true,
                                  file            : "ignis-functional-test/target/performance-reports/trends/${args.csvFile}",
                                  inclusionFlag   : 'OFF'
                          ]],
            group      : currentBuild.displayName,
            keepRecords: false,
            style      : 'line',
            title      : args.title,
            yaxis      : args.yaxis,
            logarithmic: Boolean.valueOf(args.logarithmic)
    ])
}

private void storeResults(String ignisServerCandidateRelease) {
    def versionedCandidateReleasePath = ignisServerCandidateRelease.replaceFirst('/fcr-engine-.*zip', '')

    def candidateReleaseReports = []
    dir(PERFORMANCE_REPORTS_DIR) {
        findFiles(glob: '*.csv').each { csvFile ->
            def candidateReleaseCsvReport = "${versionedCandidateReleasePath}/performance-metrics/${csvFile.name}"

            s3Deploy.upload(csvFile.name, candidateReleaseCsvReport)

            candidateReleaseReports << candidateReleaseCsvReport
        }
    }
    if (!candidateReleaseReports.isEmpty()) {
        reportReleases(candidateReleaseReports as String[])
    }
}

private void cleanUpIgnisArtifacts() {
    cleanUpLocalArtifacts groupId: 'com.lombardrisk'

    MVN.run goals: '-q -T1C clean', pom: IGNIS_POM
}